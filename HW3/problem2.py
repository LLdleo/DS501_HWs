from mrjob.job import MRJob
import logging
#-------------------------------------------------------------------------
'''
    Problem 2: 
    In this problem, you will use mapreduce framework to implement matrix multiplication. 
    
    Matrix Dataset:
    Suppose we have a dataset of two matrics A and B (matrix.csv), each line represents an element in matrix A or matrix B.
    For example, to represent a (2X3) matrix A = 1,2,3
                                                 4,5,6
        and a (3X2) matrix B = 1,-1
                               1,-1
                               1,-1
        We want to compute the matrix C = A X B (matrix multiplication)

        C =  6, -6
            15, -15 

        We will have the following input file:

        Matrix, Row_index, Column_index, Value, num_rows, num_columns
        -------------------------------------------------------------
          A   ,    1     ,      1      ,   1  ,   2     ,     2
          A   ,    1     ,      2      ,   2  ,   2     ,     2
          A   ,    1     ,      3      ,   3  ,   2     ,     2
          A   ,    2     ,      1      ,   4  ,   2     ,     2
          A   ,    2     ,      2      ,   5  ,   2     ,     2
          A   ,    2     ,      3      ,   6  ,   2     ,     2
          B   ,    1     ,      1      ,   1  ,   2     ,     2
          B   ,    1     ,      2      ,  -1  ,   2     ,     2
          B   ,    2     ,      1      ,   1  ,   2     ,     2
          B   ,    2     ,      2      ,  -1  ,   2     ,     2
          B   ,    3     ,      1      ,   1  ,   2     ,     2
          B   ,    3     ,      2      ,  -1  ,   2     ,     2
    
    Here num_rows (num_column) represents the number of rows (columns) in matrix C.

'''

#--------------------------
class MatMul(MRJob):
#--------------------------
    ''' 
        Given a matrix A and a matrix B, compute the product A*B = C (matrix multiplication)
    '''

    #----------------------
    def mapper(self, in_key, in_value):
        ''' 
            mapper function, which process a key-value pair in the data and generate intermediate key-value pair(s)
            Input:
                    in_key: the key of a data record (in this example, can be ignored)
                    in_value: the value of a data record, (in this example, it is a line of text string in the data file, check 'matrix.csv' for example)
            Yield: 
                    (out_key, out_value) :intermediate key-value pair(s). You need to design the format and meaning of the key-value pairs. These intermediate key-value pairs will be feed to reducers, after grouping all the values with a same key into a value list.
        '''
        
        #########################################
        ## INSERT YOUR CODE HERE

        # process input value 
        values = in_value.replace('\n', '').split(',')
        if values[0] == 'A':
            for i in range(1, int(values[5])+1):
                yield ['C', int(values[1]), i], [int(values[2]), float(values[3])]
        elif values[0] == 'B':
            for i in range(1, int(values[4])+1):
                yield ['C', i, int(values[2])], [int(values[1]), float(values[3])]


        # generate output key-value pairs 

        #########################################


    #----------------------
    def reducer(self, in_key, in_values):
        ''' 
            reducer function, which processes a key and value list and produces output key-value pair(s)
            Input:
                    in_key: an intermediate key from the mapper
                    in_values: a list (generator) of values , which contains all the intermediate values with the same key (in_key) generated by all mappers
            Yield: 
                    (out_key, out_value) : output key-value pair(s). 
        '''
        #########################################
        ## INSERT YOUR CODE HERE
        element_dict = dict()
        for value in in_values:
            if value[0] in element_dict.keys():
                element_dict[value[0]].append(value[1])
            else:
                element_dict[value[0]] = [value[1], ]
        result = 0
        for value in element_dict.values():
            # logging.info(value)
            result += value[0] * value[1]
        yield in_key, result
        #########################################




#--------------------------------------------

''' TEST Problem 2: 
        Now you can test the correctness of all the above functions by typing `nosetests -v test2.py' in the terminal.  

        If your code passed all the tests, you will see the following message in the terminal:
            ----------- Problem 2 (15 points in total)-------------- ... ok
            (3 points) MatMul1x1 ... ok
            (3 points) MatMul1x2 ... ok
            (3 points) MatMul2x1 ... ok
            (3 points) MatMul2x2 ... ok
            (3 points) MatMul random ... ok
            ----------------------------------------------------------------------
            Ran 5 tests in 0.103s            
            OK

'''

#--------------------------------------------





